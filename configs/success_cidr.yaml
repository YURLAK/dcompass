---
verbosity: "off"
address: 0.0.0.0:2053
script: |
  pub async fn route(upstreams, inited, ctx, query) {
    let resp = upstreams.send_default("domestic", query).await?;

    for ans in resp.answer? {
      match ans.rtype.to_str() {
        "A" if !inited.cidr.0.contains(ans.to_a()?.ip, "CN") => { return upstreams.send_default("secure", query).await; }
        "AAAA" if !inited.cidr.0.contains(ans.to_aaaa()?.ip, "CN") => { return upstreams.send_default("secure", query).await; }
        _ => continue,
      }
    }
  }

  pub async fn init() {
    let cidr = IpCidr::new().add_file("../data/ipcn.txt")?.seal();
    Ok(#{"cidr": Utils::IpCidr(cidr)})
  }

upstreams:
  domestic:
    udp:
      addr: 114.114.114.114:53
      timeout: 1
  secure:
    https:
      timeout: 2
      uri: https://dns.quad9.net/dns-query
      addr: 9.9.9.9
