---
verbosity: "info"
address: 0.0.0.0:2053
script: |
  pub async fn route(upstreams, inited, ctx, query) {
    // A few constants are predefined:
    // - query: the incoming query received
    // - ctx: the query context, e.g. client IP
    // - inited: the value returned by init()
    // - upstreams: the upstreams API

    if query.first_question.qtype.to_str() == "AAAA" {
      return blackhole(query);
    }

    let resp = upstreams.send_default("domestic", query).await?;

    for ans in resp.answer? {
      match ans.rtype.to_str() {
        "A" if !inited.geoip.0.contains(ans.to_a()?.ip, "CN") => { return upstreams.send_default("secure", query).await; }
        "AAAA" if !inited.geoip.0.contains(ans.to_aaaa()?.ip, "CN") => { return upstreams.send_default("secure", query).await; }
        _ => continue,
      }
    }
    Ok(resp)
  }

  pub async fn init() {
    Ok(#{"geoip": Utils::GeoIp(GeoIp::create_default()?)})
  }

upstreams:
  114DNS:
    udp:
      addr: 114.114.114.114:53

  Ali:
    udp:
      addr: 223.6.6.6:53

  domestic:
    hybrid:
      - 114DNS
      - Ali

  cloudflare:
    https:
      uri: https://cloudflare-dns.com/dns-query
      ratelimit: 3000
      addr: 1.0.0.1

  quad9:
    https:
      uri: https://quad9.net/dns-query
      ratelimit: 3000
      addr: 9.9.9.9

  secure:
    hybrid:
      - cloudflare
      - quad9
